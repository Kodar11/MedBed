generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid()) @db.VarChar(255)
  username        String           @unique @db.VarChar(255)
  email           String           @unique @db.VarChar(255)
  password        String           @db.VarChar(255)
  phone_number    String           @db.VarChar(255)
  refresh_token   String?          @db.VarChar(255)
  bedReservations BedReservation[]
}

model BedReservation {
  id              String   @id @default(uuid()) @db.VarChar(255)
  paymentId       String   @db.VarChar(255)
  reservationTime DateTime @default(now())
  checkInTime     DateTime @default(dbgenerated("(now() + '02:00:00'::interval)"))
  check_in        Boolean  @default(false)
  late_patient    Boolean  @default(false)
  userId          String
  hospitalId      String
  hospital        Hospital @relation(fields: [hospitalId], references: [id])
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}



model UserInsurance {
  id                String   @id @default(uuid()) @db.VarChar(255)
  insurance_company String   @db.VarChar(255)
  insurance_type_id String   @db.VarChar(255)
  valid_till        DateTime
  policy_number     String   @db.VarChar(255)
  coverage_amount   Decimal
}

model Hospital {
  id                  String               @id @default(uuid()) @db.VarChar(255)
  name                String               @db.VarChar(255)
  address             String               @db.VarChar(255)
  city                String               @db.VarChar(255)
  state               String               @db.VarChar(255)
  zip_code            String               @db.VarChar(255)
  contact_number      String               @db.VarChar(255)
  email               String?              @unique @db.VarChar(255)
  website             String?              @db.VarChar(255)
  type                String               @db.VarChar(255)
  accreditation       String?              @db.VarChar(255)
  account_number      String?              @db.VarChar(255)


  BedInfos            BedInfo[]
  BedReservation      BedReservation[]
  Customization       Customization[]
  Doctors             Doctor[]
  HealthPackages      HealthPackage[]
  Insurances          Insurance[]
  MedicalEquipments   MedicalEquipment[]
  PatientTestimonials PatientTestimonial[]
  Services            Service[]
}

model HospitalLogin{
  id              String  @id
  hospital_id     String    
  password        String
  refresh_token   String?   @db.VarChar(255)
}

model Customization {
  id             String   @id @default(uuid()) @db.VarChar(255)
  hospital_id    String   @db.VarChar(255)
  active_Service Boolean  @default(true)
  deposit_Amount Int
  hospital       Hospital @relation(fields: [hospital_id], references: [id], onDelete: Cascade)
}

model BedInfo {
  id             String   @id @default(uuid()) @db.VarChar(255)
  hospital_id    String   @db.VarChar(255)
  total_beds     Int
  bed_type       String   @db.VarChar(255)
  available_beds Int
  price          Decimal?
  live_bedcount  Int
  hospital       Hospital @relation(fields: [hospital_id], references: [id], onDelete: Cascade)
}

model Doctor {
  id               String   @id @default(uuid()) @db.VarChar(255)
  hospital_id      String   @db.VarChar(255)
  name             String   @db.VarChar(255)
  specialization   String   @db.VarChar(255)
  qualification    String   @db.VarChar(255)
  experience_years Int
  availability     String   @db.VarChar(255)
  contact_info     String?  @db.VarChar(255)
  hospital         Hospital @relation(fields: [hospital_id], references: [id], onDelete: Cascade)
}

model MedicalEquipment {
  id                   String   @id @default(uuid()) @db.VarChar(255)
  hospital_id          String   @db.VarChar(255)
  equipment_name       String   @db.VarChar(255)
  equipment_type       String   @db.VarChar(255)
  availability         Boolean
  certification_status String?  @db.VarChar(255)
  hospital             Hospital @relation(fields: [hospital_id], references: [id], onDelete: Cascade)
}

model Service {
  id                  String   @id @default(uuid()) @db.VarChar(255)
  hospital_id         String   @db.VarChar(255)
  service_name        String   @db.VarChar(255)
  service_description String?  @db.VarChar(255)
  availability        Boolean
  hospital            Hospital @relation(fields: [hospital_id], references: [id], onDelete: Cascade)
}

model Insurance {
  id                String   @id @default(uuid()) @db.VarChar(255)
  hospital_id       String   @db.VarChar(255)
  insurance_company String   @db.VarChar(255)
  contact_info      String?  @db.VarChar(255)
  insurance_type_id String   @db.VarChar(255)
  cashless          Boolean
  hospital          Hospital @relation(fields: [hospital_id], references: [id], onDelete: Cascade)
}

model PatientTestimonial {
  id           String   @id @default(uuid()) @db.VarChar(255)
  hospital_id  String   @db.VarChar(255)
  patient_name String   @db.VarChar(255)
  feedback     String   @db.VarChar(255)
  rating       Int?
  hospital     Hospital @relation(fields: [hospital_id], references: [id], onDelete: Cascade)
}

model HealthPackage {
  id                  String   @id @default(uuid()) @db.VarChar(255)
  hospital_id         String   @db.VarChar(255)
  package_name        String   @db.VarChar(255)
  package_description String?  @db.VarChar(255)
  package_price       Decimal
  hospital            Hospital @relation(fields: [hospital_id], references: [id], onDelete: Cascade)
}

model Ambulance {
  id          String   @id @default(uuid())
  hospital_id String   @db.VarChar(255)
  type        String   @db.VarChar(255)
  capacity    Int
  equipment   String[]
  location    String   @db.VarChar(255)
  status      String   @default("Available")
}

model Location {
  id   String @id @default(uuid())
  name String
}
